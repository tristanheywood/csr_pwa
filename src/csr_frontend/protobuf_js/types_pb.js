// source: types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ActiveImage', null, global);
goog.exportSymbol('proto.ClipboardContent', null, global);
goog.exportSymbol('proto.ClipboardViewColumns', null, global);
goog.exportSymbol('proto.FolderImage', null, global);
goog.exportSymbol('proto.PickStats', null, global);
goog.exportSymbol('proto.PickedCircle', null, global);
goog.exportSymbol('proto.ReadBlotch', null, global);
goog.exportSymbol('proto.ScanFolder', null, global);
goog.exportSymbol('proto.UIState', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PickStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PickStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PickStats.displayName = 'proto.PickStats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClipboardViewColumns = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClipboardViewColumns, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ClipboardViewColumns.displayName = 'proto.ClipboardViewColumns';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClipboardContent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ClipboardContent.repeatedFields_, null);
};
goog.inherits(proto.ClipboardContent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ClipboardContent.displayName = 'proto.ClipboardContent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PickedCircle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PickedCircle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PickedCircle.displayName = 'proto.PickedCircle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FolderImage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FolderImage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FolderImage.displayName = 'proto.FolderImage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ScanFolder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ScanFolder.repeatedFields_, null);
};
goog.inherits(proto.ScanFolder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ScanFolder.displayName = 'proto.ScanFolder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReadBlotch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ReadBlotch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ReadBlotch.displayName = 'proto.ReadBlotch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ActiveImage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ActiveImage.repeatedFields_, null);
};
goog.inherits(proto.ActiveImage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ActiveImage.displayName = 'proto.ActiveImage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UIState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UIState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.UIState.displayName = 'proto.UIState';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PickStats.prototype.toObject = function(opt_includeInstance) {
  return proto.PickStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PickStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PickStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    mur: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    mug: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    mub: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    percr: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    percg: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    percb: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    sigmar: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    sigmag: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    sigmab: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    numpixels: jspb.Message.getFieldWithDefault(msg, 10, 0),
    pickname: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PickStats}
 */
proto.PickStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PickStats;
  return proto.PickStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PickStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PickStats}
 */
proto.PickStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMur(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMug(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMub(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPercr(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPercg(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPercb(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSigmar(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSigmag(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSigmab(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumpixels(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setPickname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PickStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PickStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PickStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PickStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMur();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getMug();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getMub();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getPercr();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getPercg();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getPercb();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getSigmar();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getSigmag();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getSigmab();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getNumpixels();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getPickname();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional double muR = 1;
 * @return {number}
 */
proto.PickStats.prototype.getMur = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PickStats} returns this
 */
proto.PickStats.prototype.setMur = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double muG = 2;
 * @return {number}
 */
proto.PickStats.prototype.getMug = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PickStats} returns this
 */
proto.PickStats.prototype.setMug = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double muB = 3;
 * @return {number}
 */
proto.PickStats.prototype.getMub = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PickStats} returns this
 */
proto.PickStats.prototype.setMub = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double percR = 4;
 * @return {number}
 */
proto.PickStats.prototype.getPercr = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PickStats} returns this
 */
proto.PickStats.prototype.setPercr = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double percG = 5;
 * @return {number}
 */
proto.PickStats.prototype.getPercg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PickStats} returns this
 */
proto.PickStats.prototype.setPercg = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double percB = 6;
 * @return {number}
 */
proto.PickStats.prototype.getPercb = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PickStats} returns this
 */
proto.PickStats.prototype.setPercb = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double sigmaR = 7;
 * @return {number}
 */
proto.PickStats.prototype.getSigmar = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PickStats} returns this
 */
proto.PickStats.prototype.setSigmar = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double sigmaG = 8;
 * @return {number}
 */
proto.PickStats.prototype.getSigmag = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PickStats} returns this
 */
proto.PickStats.prototype.setSigmag = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double sigmaB = 9;
 * @return {number}
 */
proto.PickStats.prototype.getSigmab = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PickStats} returns this
 */
proto.PickStats.prototype.setSigmab = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional int32 numPixels = 10;
 * @return {number}
 */
proto.PickStats.prototype.getNumpixels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.PickStats} returns this
 */
proto.PickStats.prototype.setNumpixels = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string pickName = 11;
 * @return {string}
 */
proto.PickStats.prototype.getPickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.PickStats} returns this
 */
proto.PickStats.prototype.setPickname = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClipboardViewColumns.prototype.toObject = function(opt_includeInstance) {
  return proto.ClipboardViewColumns.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClipboardViewColumns} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClipboardViewColumns.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    colour: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    murgb: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    percrgb: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    sigmargb: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    numpixels: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    dummy: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClipboardViewColumns}
 */
proto.ClipboardViewColumns.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClipboardViewColumns;
  return proto.ClipboardViewColumns.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClipboardViewColumns} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClipboardViewColumns}
 */
proto.ClipboardViewColumns.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setColour(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMurgb(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPercrgb(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSigmargb(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNumpixels(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDummy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClipboardViewColumns.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClipboardViewColumns.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClipboardViewColumns} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClipboardViewColumns.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getColour();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getMurgb();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getPercrgb();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getSigmargb();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getNumpixels();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getDummy();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional bool name = 1;
 * @return {boolean}
 */
proto.ClipboardViewColumns.prototype.getName = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ClipboardViewColumns} returns this
 */
proto.ClipboardViewColumns.prototype.setName = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool colour = 2;
 * @return {boolean}
 */
proto.ClipboardViewColumns.prototype.getColour = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ClipboardViewColumns} returns this
 */
proto.ClipboardViewColumns.prototype.setColour = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool muRGB = 3;
 * @return {boolean}
 */
proto.ClipboardViewColumns.prototype.getMurgb = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ClipboardViewColumns} returns this
 */
proto.ClipboardViewColumns.prototype.setMurgb = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool percRGB = 4;
 * @return {boolean}
 */
proto.ClipboardViewColumns.prototype.getPercrgb = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ClipboardViewColumns} returns this
 */
proto.ClipboardViewColumns.prototype.setPercrgb = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool sigmaRGB = 5;
 * @return {boolean}
 */
proto.ClipboardViewColumns.prototype.getSigmargb = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ClipboardViewColumns} returns this
 */
proto.ClipboardViewColumns.prototype.setSigmargb = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool numPixels = 6;
 * @return {boolean}
 */
proto.ClipboardViewColumns.prototype.getNumpixels = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ClipboardViewColumns} returns this
 */
proto.ClipboardViewColumns.prototype.setNumpixels = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional int32 dummy = 7;
 * @return {number}
 */
proto.ClipboardViewColumns.prototype.getDummy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.ClipboardViewColumns} returns this
 */
proto.ClipboardViewColumns.prototype.setDummy = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ClipboardContent.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClipboardContent.prototype.toObject = function(opt_includeInstance) {
  return proto.ClipboardContent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClipboardContent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClipboardContent.toObject = function(includeInstance, msg) {
  var f, obj = {
    rowsList: jspb.Message.toObjectList(msg.getRowsList(),
    proto.PickStats.toObject, includeInstance),
    blotchidsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClipboardContent}
 */
proto.ClipboardContent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClipboardContent;
  return proto.ClipboardContent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClipboardContent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClipboardContent}
 */
proto.ClipboardContent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PickStats;
      reader.readMessage(value,proto.PickStats.deserializeBinaryFromReader);
      msg.addRows(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBlotchids(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClipboardContent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClipboardContent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClipboardContent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClipboardContent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PickStats.serializeBinaryToWriter
    );
  }
  f = message.getBlotchidsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};


/**
 * repeated PickStats rows = 1;
 * @return {!Array<!proto.PickStats>}
 */
proto.ClipboardContent.prototype.getRowsList = function() {
  return /** @type{!Array<!proto.PickStats>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PickStats, 1));
};


/**
 * @param {!Array<!proto.PickStats>} value
 * @return {!proto.ClipboardContent} returns this
*/
proto.ClipboardContent.prototype.setRowsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PickStats=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PickStats}
 */
proto.ClipboardContent.prototype.addRows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PickStats, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ClipboardContent} returns this
 */
proto.ClipboardContent.prototype.clearRowsList = function() {
  return this.setRowsList([]);
};


/**
 * repeated int32 blotchIDs = 2;
 * @return {!Array<number>}
 */
proto.ClipboardContent.prototype.getBlotchidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ClipboardContent} returns this
 */
proto.ClipboardContent.prototype.setBlotchidsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ClipboardContent} returns this
 */
proto.ClipboardContent.prototype.addBlotchids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ClipboardContent} returns this
 */
proto.ClipboardContent.prototype.clearBlotchidsList = function() {
  return this.setBlotchidsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PickedCircle.prototype.toObject = function(opt_includeInstance) {
  return proto.PickedCircle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PickedCircle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PickedCircle.toObject = function(includeInstance, msg) {
  var f, obj = {
    centerrow: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    centercol: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    radius: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    imgfilename: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PickedCircle}
 */
proto.PickedCircle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PickedCircle;
  return proto.PickedCircle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PickedCircle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PickedCircle}
 */
proto.PickedCircle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCenterrow(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCentercol(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRadius(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setImgfilename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PickedCircle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PickedCircle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PickedCircle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PickedCircle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCenterrow();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getCentercol();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getRadius();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getImgfilename();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional double centerRow = 1;
 * @return {number}
 */
proto.PickedCircle.prototype.getCenterrow = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PickedCircle} returns this
 */
proto.PickedCircle.prototype.setCenterrow = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double centerCol = 2;
 * @return {number}
 */
proto.PickedCircle.prototype.getCentercol = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PickedCircle} returns this
 */
proto.PickedCircle.prototype.setCentercol = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double radius = 3;
 * @return {number}
 */
proto.PickedCircle.prototype.getRadius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PickedCircle} returns this
 */
proto.PickedCircle.prototype.setRadius = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional string imgFileName = 4;
 * @return {string}
 */
proto.PickedCircle.prototype.getImgfilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.PickedCircle} returns this
 */
proto.PickedCircle.prototype.setImgfilename = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FolderImage.prototype.toObject = function(opt_includeInstance) {
  return proto.FolderImage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FolderImage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FolderImage.toObject = function(includeInstance, msg) {
  var f, obj = {
    filename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    thumbnailimgvfn: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FolderImage}
 */
proto.FolderImage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FolderImage;
  return proto.FolderImage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FolderImage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FolderImage}
 */
proto.FolderImage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setThumbnailimgvfn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FolderImage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FolderImage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FolderImage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FolderImage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getThumbnailimgvfn();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string fileName = 1;
 * @return {string}
 */
proto.FolderImage.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.FolderImage} returns this
 */
proto.FolderImage.prototype.setFilename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string thumbnailImgVFN = 2;
 * @return {string}
 */
proto.FolderImage.prototype.getThumbnailimgvfn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.FolderImage} returns this
 */
proto.FolderImage.prototype.setThumbnailimgvfn = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ScanFolder.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ScanFolder.prototype.toObject = function(opt_includeInstance) {
  return proto.ScanFolder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ScanFolder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ScanFolder.toObject = function(includeInstance, msg) {
  var f, obj = {
    folderimagesList: jspb.Message.toObjectList(msg.getFolderimagesList(),
    proto.FolderImage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ScanFolder}
 */
proto.ScanFolder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ScanFolder;
  return proto.ScanFolder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ScanFolder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ScanFolder}
 */
proto.ScanFolder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.FolderImage;
      reader.readMessage(value,proto.FolderImage.deserializeBinaryFromReader);
      msg.addFolderimages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ScanFolder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ScanFolder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ScanFolder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ScanFolder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFolderimagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.FolderImage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FolderImage folderImages = 1;
 * @return {!Array<!proto.FolderImage>}
 */
proto.ScanFolder.prototype.getFolderimagesList = function() {
  return /** @type{!Array<!proto.FolderImage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.FolderImage, 1));
};


/**
 * @param {!Array<!proto.FolderImage>} value
 * @return {!proto.ScanFolder} returns this
*/
proto.ScanFolder.prototype.setFolderimagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.FolderImage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.FolderImage}
 */
proto.ScanFolder.prototype.addFolderimages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.FolderImage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ScanFolder} returns this
 */
proto.ScanFolder.prototype.clearFolderimagesList = function() {
  return this.setFolderimagesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReadBlotch.prototype.toObject = function(opt_includeInstance) {
  return proto.ReadBlotch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReadBlotch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReadBlotch.toObject = function(includeInstance, msg) {
  var f, obj = {
    circle: (f = msg.getCircle()) && proto.PickedCircle.toObject(includeInstance, f),
    stats: (f = msg.getStats()) && proto.PickStats.toObject(includeInstance, f),
    contextvfn: jspb.Message.getFieldWithDefault(msg, 3, ""),
    comparevfn: jspb.Message.getFieldWithDefault(msg, 4, ""),
    blotchid: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReadBlotch}
 */
proto.ReadBlotch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReadBlotch;
  return proto.ReadBlotch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReadBlotch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReadBlotch}
 */
proto.ReadBlotch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PickedCircle;
      reader.readMessage(value,proto.PickedCircle.deserializeBinaryFromReader);
      msg.setCircle(value);
      break;
    case 2:
      var value = new proto.PickStats;
      reader.readMessage(value,proto.PickStats.deserializeBinaryFromReader);
      msg.setStats(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextvfn(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setComparevfn(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBlotchid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReadBlotch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ReadBlotch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ReadBlotch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReadBlotch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCircle();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PickedCircle.serializeBinaryToWriter
    );
  }
  f = message.getStats();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.PickStats.serializeBinaryToWriter
    );
  }
  f = message.getContextvfn();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getComparevfn();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBlotchid();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional PickedCircle circle = 1;
 * @return {?proto.PickedCircle}
 */
proto.ReadBlotch.prototype.getCircle = function() {
  return /** @type{?proto.PickedCircle} */ (
    jspb.Message.getWrapperField(this, proto.PickedCircle, 1));
};


/**
 * @param {?proto.PickedCircle|undefined} value
 * @return {!proto.ReadBlotch} returns this
*/
proto.ReadBlotch.prototype.setCircle = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ReadBlotch} returns this
 */
proto.ReadBlotch.prototype.clearCircle = function() {
  return this.setCircle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ReadBlotch.prototype.hasCircle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PickStats stats = 2;
 * @return {?proto.PickStats}
 */
proto.ReadBlotch.prototype.getStats = function() {
  return /** @type{?proto.PickStats} */ (
    jspb.Message.getWrapperField(this, proto.PickStats, 2));
};


/**
 * @param {?proto.PickStats|undefined} value
 * @return {!proto.ReadBlotch} returns this
*/
proto.ReadBlotch.prototype.setStats = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ReadBlotch} returns this
 */
proto.ReadBlotch.prototype.clearStats = function() {
  return this.setStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ReadBlotch.prototype.hasStats = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string contextVFN = 3;
 * @return {string}
 */
proto.ReadBlotch.prototype.getContextvfn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ReadBlotch} returns this
 */
proto.ReadBlotch.prototype.setContextvfn = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string compareVFN = 4;
 * @return {string}
 */
proto.ReadBlotch.prototype.getComparevfn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ReadBlotch} returns this
 */
proto.ReadBlotch.prototype.setComparevfn = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 blotchID = 5;
 * @return {number}
 */
proto.ReadBlotch.prototype.getBlotchid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ReadBlotch} returns this
 */
proto.ReadBlotch.prototype.setBlotchid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ActiveImage.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ActiveImage.prototype.toObject = function(opt_includeInstance) {
  return proto.ActiveImage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ActiveImage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ActiveImage.toObject = function(includeInstance, msg) {
  var f, obj = {
    filename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    imgdatavfn: jspb.Message.getFieldWithDefault(msg, 2, ""),
    readblotchesList: jspb.Message.toObjectList(msg.getReadblotchesList(),
    proto.ReadBlotch.toObject, includeInstance),
    zoomratiosrcimg: jspb.Message.getFieldWithDefault(msg, 4, 0),
    zoomratioviewimg: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ActiveImage}
 */
proto.ActiveImage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ActiveImage;
  return proto.ActiveImage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ActiveImage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ActiveImage}
 */
proto.ActiveImage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setImgdatavfn(value);
      break;
    case 3:
      var value = new proto.ReadBlotch;
      reader.readMessage(value,proto.ReadBlotch.deserializeBinaryFromReader);
      msg.addReadblotches(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZoomratiosrcimg(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZoomratioviewimg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ActiveImage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ActiveImage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ActiveImage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ActiveImage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getImgdatavfn();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReadblotchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ReadBlotch.serializeBinaryToWriter
    );
  }
  f = message.getZoomratiosrcimg();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getZoomratioviewimg();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string fileName = 1;
 * @return {string}
 */
proto.ActiveImage.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ActiveImage} returns this
 */
proto.ActiveImage.prototype.setFilename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string imgDataVFN = 2;
 * @return {string}
 */
proto.ActiveImage.prototype.getImgdatavfn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ActiveImage} returns this
 */
proto.ActiveImage.prototype.setImgdatavfn = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated ReadBlotch readBlotches = 3;
 * @return {!Array<!proto.ReadBlotch>}
 */
proto.ActiveImage.prototype.getReadblotchesList = function() {
  return /** @type{!Array<!proto.ReadBlotch>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ReadBlotch, 3));
};


/**
 * @param {!Array<!proto.ReadBlotch>} value
 * @return {!proto.ActiveImage} returns this
*/
proto.ActiveImage.prototype.setReadblotchesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ReadBlotch=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ReadBlotch}
 */
proto.ActiveImage.prototype.addReadblotches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ReadBlotch, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ActiveImage} returns this
 */
proto.ActiveImage.prototype.clearReadblotchesList = function() {
  return this.setReadblotchesList([]);
};


/**
 * optional int32 zoomRatioSrcImg = 4;
 * @return {number}
 */
proto.ActiveImage.prototype.getZoomratiosrcimg = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ActiveImage} returns this
 */
proto.ActiveImage.prototype.setZoomratiosrcimg = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 zoomRatioViewImg = 5;
 * @return {number}
 */
proto.ActiveImage.prototype.getZoomratioviewimg = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ActiveImage} returns this
 */
proto.ActiveImage.prototype.setZoomratioviewimg = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UIState.prototype.toObject = function(opt_includeInstance) {
  return proto.UIState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UIState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIState.toObject = function(includeInstance, msg) {
  var f, obj = {
    openfolder: (f = msg.getOpenfolder()) && proto.ScanFolder.toObject(includeInstance, f),
    selectedfolderimgidx: jspb.Message.getFieldWithDefault(msg, 2, 0),
    activeimage: (f = msg.getActiveimage()) && proto.ActiveImage.toObject(includeInstance, f),
    clipboardcontent: (f = msg.getClipboardcontent()) && proto.ClipboardContent.toObject(includeInstance, f),
    clipboardviewcolumns: (f = msg.getClipboardviewcolumns()) && proto.ClipboardViewColumns.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UIState}
 */
proto.UIState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UIState;
  return proto.UIState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UIState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UIState}
 */
proto.UIState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ScanFolder;
      reader.readMessage(value,proto.ScanFolder.deserializeBinaryFromReader);
      msg.setOpenfolder(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSelectedfolderimgidx(value);
      break;
    case 3:
      var value = new proto.ActiveImage;
      reader.readMessage(value,proto.ActiveImage.deserializeBinaryFromReader);
      msg.setActiveimage(value);
      break;
    case 4:
      var value = new proto.ClipboardContent;
      reader.readMessage(value,proto.ClipboardContent.deserializeBinaryFromReader);
      msg.setClipboardcontent(value);
      break;
    case 5:
      var value = new proto.ClipboardViewColumns;
      reader.readMessage(value,proto.ClipboardViewColumns.deserializeBinaryFromReader);
      msg.setClipboardviewcolumns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UIState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UIState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UIState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UIState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpenfolder();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ScanFolder.serializeBinaryToWriter
    );
  }
  f = message.getSelectedfolderimgidx();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getActiveimage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ActiveImage.serializeBinaryToWriter
    );
  }
  f = message.getClipboardcontent();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ClipboardContent.serializeBinaryToWriter
    );
  }
  f = message.getClipboardviewcolumns();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ClipboardViewColumns.serializeBinaryToWriter
    );
  }
};


/**
 * optional ScanFolder openFolder = 1;
 * @return {?proto.ScanFolder}
 */
proto.UIState.prototype.getOpenfolder = function() {
  return /** @type{?proto.ScanFolder} */ (
    jspb.Message.getWrapperField(this, proto.ScanFolder, 1));
};


/**
 * @param {?proto.ScanFolder|undefined} value
 * @return {!proto.UIState} returns this
*/
proto.UIState.prototype.setOpenfolder = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.UIState} returns this
 */
proto.UIState.prototype.clearOpenfolder = function() {
  return this.setOpenfolder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.UIState.prototype.hasOpenfolder = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 selectedFolderImgIdx = 2;
 * @return {number}
 */
proto.UIState.prototype.getSelectedfolderimgidx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.UIState} returns this
 */
proto.UIState.prototype.setSelectedfolderimgidx = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ActiveImage activeImage = 3;
 * @return {?proto.ActiveImage}
 */
proto.UIState.prototype.getActiveimage = function() {
  return /** @type{?proto.ActiveImage} */ (
    jspb.Message.getWrapperField(this, proto.ActiveImage, 3));
};


/**
 * @param {?proto.ActiveImage|undefined} value
 * @return {!proto.UIState} returns this
*/
proto.UIState.prototype.setActiveimage = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.UIState} returns this
 */
proto.UIState.prototype.clearActiveimage = function() {
  return this.setActiveimage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.UIState.prototype.hasActiveimage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ClipboardContent clipboardContent = 4;
 * @return {?proto.ClipboardContent}
 */
proto.UIState.prototype.getClipboardcontent = function() {
  return /** @type{?proto.ClipboardContent} */ (
    jspb.Message.getWrapperField(this, proto.ClipboardContent, 4));
};


/**
 * @param {?proto.ClipboardContent|undefined} value
 * @return {!proto.UIState} returns this
*/
proto.UIState.prototype.setClipboardcontent = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.UIState} returns this
 */
proto.UIState.prototype.clearClipboardcontent = function() {
  return this.setClipboardcontent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.UIState.prototype.hasClipboardcontent = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ClipboardViewColumns clipboardViewColumns = 5;
 * @return {?proto.ClipboardViewColumns}
 */
proto.UIState.prototype.getClipboardviewcolumns = function() {
  return /** @type{?proto.ClipboardViewColumns} */ (
    jspb.Message.getWrapperField(this, proto.ClipboardViewColumns, 5));
};


/**
 * @param {?proto.ClipboardViewColumns|undefined} value
 * @return {!proto.UIState} returns this
*/
proto.UIState.prototype.setClipboardviewcolumns = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.UIState} returns this
 */
proto.UIState.prototype.clearClipboardviewcolumns = function() {
  return this.setClipboardviewcolumns(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.UIState.prototype.hasClipboardviewcolumns = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto);
